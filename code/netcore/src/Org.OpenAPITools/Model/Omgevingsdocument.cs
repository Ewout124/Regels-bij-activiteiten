/*
 * Plan SW - Toepasbare regel SW
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: robert.melskens@vng.nl
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// &lt;body&gt;&lt;p&gt;Een inhoudelijke toelichting op de toepassing van het informatie-element.&lt;/p&gt;&lt;/body&gt;
    /// </summary>
    [DataContract(Name = "Omgevingsdocument")]
    public partial class Omgevingsdocument : IEquatable<Omgevingsdocument>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Omgevingsdocument" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Omgevingsdocument() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Omgevingsdocument" /> class.
        /// </summary>
        /// <param name="codeBevoegdGezag">&lt;body&gt;&lt;p&gt;Een inhoudelijke toelichting op de toepassing van het informatie-element.&lt;/p&gt;&lt;/body&gt; (required).</param>
        /// <param name="identificatie">&lt;body&gt;&lt;p&gt;Een inhoudelijke toelichting op de toepassing van het informatie-element.&lt;/p&gt;&lt;/body&gt; (required).</param>
        /// <param name="opschrift">&lt;body&gt;&lt;p&gt;Een inhoudelijke toelichting op de toepassing van het informatie-element.&lt;/p&gt;&lt;/body&gt;&lt;body&gt;&lt;p&gt;De verzameling van waarden die gegevens van dit attribuutsoort kunnen hebben, dat wil zeggen het waardenbereik, uitgedrukt in een specifieke structuur.&lt;/p&gt;&lt;/body&gt; (required).</param>
        /// <param name="type">type.</param>
        public Omgevingsdocument(string codeBevoegdGezag = default(string), string identificatie = default(string), string opschrift = default(string), Soortregeling type = default(Soortregeling))
        {
            // to ensure "codeBevoegdGezag" is required (not null)
            this.CodeBevoegdGezag = codeBevoegdGezag ?? throw new ArgumentNullException("codeBevoegdGezag is a required property for Omgevingsdocument and cannot be null");
            // to ensure "identificatie" is required (not null)
            this.Identificatie = identificatie ?? throw new ArgumentNullException("identificatie is a required property for Omgevingsdocument and cannot be null");
            // to ensure "opschrift" is required (not null)
            this.Opschrift = opschrift ?? throw new ArgumentNullException("opschrift is a required property for Omgevingsdocument and cannot be null");
            this.Type = type;
        }

        /// <summary>
        /// &lt;body&gt;&lt;p&gt;Een inhoudelijke toelichting op de toepassing van het informatie-element.&lt;/p&gt;&lt;/body&gt;
        /// </summary>
        /// <value>&lt;body&gt;&lt;p&gt;Een inhoudelijke toelichting op de toepassing van het informatie-element.&lt;/p&gt;&lt;/body&gt;</value>
        [DataMember(Name = "codeBevoegdGezag", IsRequired = true, EmitDefaultValue = false)]
        public string CodeBevoegdGezag { get; set; }

        /// <summary>
        /// &lt;body&gt;&lt;p&gt;Een inhoudelijke toelichting op de toepassing van het informatie-element.&lt;/p&gt;&lt;/body&gt;
        /// </summary>
        /// <value>&lt;body&gt;&lt;p&gt;Een inhoudelijke toelichting op de toepassing van het informatie-element.&lt;/p&gt;&lt;/body&gt;</value>
        [DataMember(Name = "identificatie", IsRequired = true, EmitDefaultValue = false)]
        public string Identificatie { get; set; }

        /// <summary>
        /// &lt;body&gt;&lt;p&gt;Een inhoudelijke toelichting op de toepassing van het informatie-element.&lt;/p&gt;&lt;/body&gt;&lt;body&gt;&lt;p&gt;De verzameling van waarden die gegevens van dit attribuutsoort kunnen hebben, dat wil zeggen het waardenbereik, uitgedrukt in een specifieke structuur.&lt;/p&gt;&lt;/body&gt;
        /// </summary>
        /// <value>&lt;body&gt;&lt;p&gt;Een inhoudelijke toelichting op de toepassing van het informatie-element.&lt;/p&gt;&lt;/body&gt;&lt;body&gt;&lt;p&gt;De verzameling van waarden die gegevens van dit attribuutsoort kunnen hebben, dat wil zeggen het waardenbereik, uitgedrukt in een specifieke structuur.&lt;/p&gt;&lt;/body&gt;</value>
        [DataMember(Name = "opschrift", IsRequired = true, EmitDefaultValue = false)]
        public string Opschrift { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public Soortregeling Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Omgevingsdocument {\n");
            sb.Append("  CodeBevoegdGezag: ").Append(CodeBevoegdGezag).Append("\n");
            sb.Append("  Identificatie: ").Append(Identificatie).Append("\n");
            sb.Append("  Opschrift: ").Append(Opschrift).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Omgevingsdocument);
        }

        /// <summary>
        /// Returns true if Omgevingsdocument instances are equal
        /// </summary>
        /// <param name="input">Instance of Omgevingsdocument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Omgevingsdocument input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CodeBevoegdGezag == input.CodeBevoegdGezag ||
                    (this.CodeBevoegdGezag != null &&
                    this.CodeBevoegdGezag.Equals(input.CodeBevoegdGezag))
                ) && 
                (
                    this.Identificatie == input.Identificatie ||
                    (this.Identificatie != null &&
                    this.Identificatie.Equals(input.Identificatie))
                ) && 
                (
                    this.Opschrift == input.Opschrift ||
                    (this.Opschrift != null &&
                    this.Opschrift.Equals(input.Opschrift))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CodeBevoegdGezag != null)
                    hashCode = hashCode * 59 + this.CodeBevoegdGezag.GetHashCode();
                if (this.Identificatie != null)
                    hashCode = hashCode * 59 + this.Identificatie.GetHashCode();
                if (this.Opschrift != null)
                    hashCode = hashCode * 59 + this.Opschrift.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // CodeBevoegdGezag (string) minLength
            if(this.CodeBevoegdGezag != null && this.CodeBevoegdGezag.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CodeBevoegdGezag, length must be greater than 1.", new [] { "CodeBevoegdGezag" });
            }

            // Identificatie (string) minLength
            if(this.Identificatie != null && this.Identificatie.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Identificatie, length must be greater than 1.", new [] { "Identificatie" });
            }

            // Opschrift (string) minLength
            if(this.Opschrift != null && this.Opschrift.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Opschrift, length must be greater than 1.", new [] { "Opschrift" });
            }

            yield break;
        }
    }

}
