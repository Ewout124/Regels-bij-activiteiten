/*
 * Plan SW - Toepasbare regel SW
 *
 * Nog in te voorzien
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: robert.melskens@vng.nl
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// &lt;body&gt;&lt;p&gt;Een inhoudelijke toelichting op de toepassing van het informatie-element.&lt;/p&gt;&lt;/body&gt;
    /// </summary>
    [DataContract(Name = "ActiviteitLocatieaanduiding")]
    public partial class ActiviteitLocatieaanduiding : IEquatable<ActiviteitLocatieaanduiding>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActiviteitLocatieaanduiding" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ActiviteitLocatieaanduiding() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ActiviteitLocatieaanduiding" /> class.
        /// </summary>
        /// <param name="activiteitregelkwalificatie">activiteitregelkwalificatie (required).</param>
        /// <param name="betreffendeActiviteitIdentificatie">betreffendeActiviteitIdentificatie (required).</param>
        /// <param name="gekwalificeerdeLocatieIdentificaties">gekwalificeerdeLocatieIdentificaties (required).</param>
        /// <param name="identificatie">identificatie (required).</param>
        public ActiviteitLocatieaanduiding(Activiteitregelkwalificatie activiteitregelkwalificatie = default(Activiteitregelkwalificatie), string betreffendeActiviteitIdentificatie = default(string), List<string> gekwalificeerdeLocatieIdentificaties = default(List<string>), string identificatie = default(string))
        {
            // to ensure "activiteitregelkwalificatie" is required (not null)
            this.Activiteitregelkwalificatie = activiteitregelkwalificatie ?? throw new ArgumentNullException("activiteitregelkwalificatie is a required property for ActiviteitLocatieaanduiding and cannot be null");
            // to ensure "betreffendeActiviteitIdentificatie" is required (not null)
            this.BetreffendeActiviteitIdentificatie = betreffendeActiviteitIdentificatie ?? throw new ArgumentNullException("betreffendeActiviteitIdentificatie is a required property for ActiviteitLocatieaanduiding and cannot be null");
            // to ensure "gekwalificeerdeLocatieIdentificaties" is required (not null)
            this.GekwalificeerdeLocatieIdentificaties = gekwalificeerdeLocatieIdentificaties ?? throw new ArgumentNullException("gekwalificeerdeLocatieIdentificaties is a required property for ActiviteitLocatieaanduiding and cannot be null");
            // to ensure "identificatie" is required (not null)
            this.Identificatie = identificatie ?? throw new ArgumentNullException("identificatie is a required property for ActiviteitLocatieaanduiding and cannot be null");
        }

        /// <summary>
        /// Gets or Sets Activiteitregelkwalificatie
        /// </summary>
        [DataMember(Name = "activiteitregelkwalificatie", IsRequired = true, EmitDefaultValue = false)]
        public Activiteitregelkwalificatie Activiteitregelkwalificatie { get; set; }

        /// <summary>
        /// Gets or Sets BetreffendeActiviteitIdentificatie
        /// </summary>
        [DataMember(Name = "betreffendeActiviteitIdentificatie", IsRequired = true, EmitDefaultValue = false)]
        public string BetreffendeActiviteitIdentificatie { get; set; }

        /// <summary>
        /// Gets or Sets GekwalificeerdeLocatieIdentificaties
        /// </summary>
        [DataMember(Name = "gekwalificeerdeLocatieIdentificaties", IsRequired = true, EmitDefaultValue = false)]
        public List<string> GekwalificeerdeLocatieIdentificaties { get; set; }

        /// <summary>
        /// Gets or Sets Identificatie
        /// </summary>
        [DataMember(Name = "identificatie", IsRequired = true, EmitDefaultValue = false)]
        public string Identificatie { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ActiviteitLocatieaanduiding {\n");
            sb.Append("  Activiteitregelkwalificatie: ").Append(Activiteitregelkwalificatie).Append("\n");
            sb.Append("  BetreffendeActiviteitIdentificatie: ").Append(BetreffendeActiviteitIdentificatie).Append("\n");
            sb.Append("  GekwalificeerdeLocatieIdentificaties: ").Append(GekwalificeerdeLocatieIdentificaties).Append("\n");
            sb.Append("  Identificatie: ").Append(Identificatie).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ActiviteitLocatieaanduiding);
        }

        /// <summary>
        /// Returns true if ActiviteitLocatieaanduiding instances are equal
        /// </summary>
        /// <param name="input">Instance of ActiviteitLocatieaanduiding to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActiviteitLocatieaanduiding input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Activiteitregelkwalificatie == input.Activiteitregelkwalificatie ||
                    (this.Activiteitregelkwalificatie != null &&
                    this.Activiteitregelkwalificatie.Equals(input.Activiteitregelkwalificatie))
                ) && 
                (
                    this.BetreffendeActiviteitIdentificatie == input.BetreffendeActiviteitIdentificatie ||
                    (this.BetreffendeActiviteitIdentificatie != null &&
                    this.BetreffendeActiviteitIdentificatie.Equals(input.BetreffendeActiviteitIdentificatie))
                ) && 
                (
                    this.GekwalificeerdeLocatieIdentificaties == input.GekwalificeerdeLocatieIdentificaties ||
                    this.GekwalificeerdeLocatieIdentificaties != null &&
                    input.GekwalificeerdeLocatieIdentificaties != null &&
                    this.GekwalificeerdeLocatieIdentificaties.SequenceEqual(input.GekwalificeerdeLocatieIdentificaties)
                ) && 
                (
                    this.Identificatie == input.Identificatie ||
                    (this.Identificatie != null &&
                    this.Identificatie.Equals(input.Identificatie))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Activiteitregelkwalificatie != null)
                    hashCode = hashCode * 59 + this.Activiteitregelkwalificatie.GetHashCode();
                if (this.BetreffendeActiviteitIdentificatie != null)
                    hashCode = hashCode * 59 + this.BetreffendeActiviteitIdentificatie.GetHashCode();
                if (this.GekwalificeerdeLocatieIdentificaties != null)
                    hashCode = hashCode * 59 + this.GekwalificeerdeLocatieIdentificaties.GetHashCode();
                if (this.Identificatie != null)
                    hashCode = hashCode * 59 + this.Identificatie.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
