/*
 * Plan SW - Toepasbare regel SW
 *
 * Nog in te voorzien
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: robert.melskens@vng.nl
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// &lt;body&gt;&lt;p&gt;Een specifieke datatype voor het vastleggen van waarden met een eenheid, zoals 5 meter, 30 decibel en andere.&lt;/p&gt;&lt;/body&gt;
    /// </summary>
    [DataContract(Name = "WaardeEenheid")]
    public partial class WaardeEenheid : IEquatable<WaardeEenheid>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WaardeEenheid" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WaardeEenheid() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WaardeEenheid" /> class.
        /// </summary>
        /// <param name="eenheid">eenheid (required).</param>
        /// <param name="waarde">waarde (required).</param>
        public WaardeEenheid(string eenheid = default(string), string waarde = default(string))
        {
            // to ensure "eenheid" is required (not null)
            this.Eenheid = eenheid ?? throw new ArgumentNullException("eenheid is a required property for WaardeEenheid and cannot be null");
            // to ensure "waarde" is required (not null)
            this.Waarde = waarde ?? throw new ArgumentNullException("waarde is a required property for WaardeEenheid and cannot be null");
        }

        /// <summary>
        /// Gets or Sets Eenheid
        /// </summary>
        [DataMember(Name = "eenheid", IsRequired = true, EmitDefaultValue = false)]
        public string Eenheid { get; set; }

        /// <summary>
        /// Gets or Sets Waarde
        /// </summary>
        [DataMember(Name = "waarde", IsRequired = true, EmitDefaultValue = false)]
        public string Waarde { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WaardeEenheid {\n");
            sb.Append("  Eenheid: ").Append(Eenheid).Append("\n");
            sb.Append("  Waarde: ").Append(Waarde).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WaardeEenheid);
        }

        /// <summary>
        /// Returns true if WaardeEenheid instances are equal
        /// </summary>
        /// <param name="input">Instance of WaardeEenheid to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WaardeEenheid input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Eenheid == input.Eenheid ||
                    (this.Eenheid != null &&
                    this.Eenheid.Equals(input.Eenheid))
                ) && 
                (
                    this.Waarde == input.Waarde ||
                    (this.Waarde != null &&
                    this.Waarde.Equals(input.Waarde))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Eenheid != null)
                    hashCode = hashCode * 59 + this.Eenheid.GetHashCode();
                if (this.Waarde != null)
                    hashCode = hashCode * 59 + this.Waarde.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
