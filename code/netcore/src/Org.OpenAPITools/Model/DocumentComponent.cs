/*
 * Plan SW - Toepasbare regel SW
 *
 * Nog in te voorzien
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: robert.melskens@vng.nl
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// &lt;body&gt;&lt;p&gt;Een inhoudelijke toelichting op de toepassing van het informatie-element.&lt;/p&gt;&lt;/body&gt;
    /// </summary>
    [DataContract(Name = "DocumentComponent")]
    public partial class DocumentComponent : IEquatable<DocumentComponent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentComponent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DocumentComponent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentComponent" /> class.
        /// </summary>
        /// <param name="codeBevoegdGezag">codeBevoegdGezag (required).</param>
        /// <param name="documentIdentificatie">documentIdentificatie (required).</param>
        /// <param name="documentOpschrift">documentOpschrift (required).</param>
        /// <param name="documentType">documentType (required).</param>
        /// <param name="kop">kop.</param>
        public DocumentComponent(string codeBevoegdGezag = default(string), string documentIdentificatie = default(string), string documentOpschrift = default(string), Soortregeling documentType = default(Soortregeling), Kop kop = default(Kop))
        {
            // to ensure "codeBevoegdGezag" is required (not null)
            this.CodeBevoegdGezag = codeBevoegdGezag ?? throw new ArgumentNullException("codeBevoegdGezag is a required property for DocumentComponent and cannot be null");
            // to ensure "documentIdentificatie" is required (not null)
            this.DocumentIdentificatie = documentIdentificatie ?? throw new ArgumentNullException("documentIdentificatie is a required property for DocumentComponent and cannot be null");
            // to ensure "documentOpschrift" is required (not null)
            this.DocumentOpschrift = documentOpschrift ?? throw new ArgumentNullException("documentOpschrift is a required property for DocumentComponent and cannot be null");
            // to ensure "documentType" is required (not null)
            this.DocumentType = documentType ?? throw new ArgumentNullException("documentType is a required property for DocumentComponent and cannot be null");
            this.Kop = kop;
        }

        /// <summary>
        /// Gets or Sets CodeBevoegdGezag
        /// </summary>
        [DataMember(Name = "codeBevoegdGezag", IsRequired = true, EmitDefaultValue = false)]
        public string CodeBevoegdGezag { get; set; }

        /// <summary>
        /// Gets or Sets DocumentIdentificatie
        /// </summary>
        [DataMember(Name = "documentIdentificatie", IsRequired = true, EmitDefaultValue = false)]
        public string DocumentIdentificatie { get; set; }

        /// <summary>
        /// Gets or Sets DocumentOpschrift
        /// </summary>
        [DataMember(Name = "documentOpschrift", IsRequired = true, EmitDefaultValue = false)]
        public string DocumentOpschrift { get; set; }

        /// <summary>
        /// Gets or Sets DocumentType
        /// </summary>
        [DataMember(Name = "documentType", IsRequired = true, EmitDefaultValue = false)]
        public Soortregeling DocumentType { get; set; }

        /// <summary>
        /// Gets or Sets Kop
        /// </summary>
        [DataMember(Name = "kop", EmitDefaultValue = false)]
        public Kop Kop { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentComponent {\n");
            sb.Append("  CodeBevoegdGezag: ").Append(CodeBevoegdGezag).Append("\n");
            sb.Append("  DocumentIdentificatie: ").Append(DocumentIdentificatie).Append("\n");
            sb.Append("  DocumentOpschrift: ").Append(DocumentOpschrift).Append("\n");
            sb.Append("  DocumentType: ").Append(DocumentType).Append("\n");
            sb.Append("  Kop: ").Append(Kop).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentComponent);
        }

        /// <summary>
        /// Returns true if DocumentComponent instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentComponent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentComponent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CodeBevoegdGezag == input.CodeBevoegdGezag ||
                    (this.CodeBevoegdGezag != null &&
                    this.CodeBevoegdGezag.Equals(input.CodeBevoegdGezag))
                ) && 
                (
                    this.DocumentIdentificatie == input.DocumentIdentificatie ||
                    (this.DocumentIdentificatie != null &&
                    this.DocumentIdentificatie.Equals(input.DocumentIdentificatie))
                ) && 
                (
                    this.DocumentOpschrift == input.DocumentOpschrift ||
                    (this.DocumentOpschrift != null &&
                    this.DocumentOpschrift.Equals(input.DocumentOpschrift))
                ) && 
                (
                    this.DocumentType == input.DocumentType ||
                    (this.DocumentType != null &&
                    this.DocumentType.Equals(input.DocumentType))
                ) && 
                (
                    this.Kop == input.Kop ||
                    (this.Kop != null &&
                    this.Kop.Equals(input.Kop))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CodeBevoegdGezag != null)
                    hashCode = hashCode * 59 + this.CodeBevoegdGezag.GetHashCode();
                if (this.DocumentIdentificatie != null)
                    hashCode = hashCode * 59 + this.DocumentIdentificatie.GetHashCode();
                if (this.DocumentOpschrift != null)
                    hashCode = hashCode * 59 + this.DocumentOpschrift.GetHashCode();
                if (this.DocumentType != null)
                    hashCode = hashCode * 59 + this.DocumentType.GetHashCode();
                if (this.Kop != null)
                    hashCode = hashCode * 59 + this.Kop.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
