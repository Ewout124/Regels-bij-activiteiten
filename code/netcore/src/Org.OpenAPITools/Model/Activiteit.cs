/*
 * Plan SW - Toepasbare regel SW
 *
 * Nog in te voorzien
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: robert.melskens@vng.nl
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// &lt;body&gt;&lt;p&gt;Een activiteit is ieder menselijk handelen waarbij, of ieder menselijk nalaten waardoor een verandering of effect in de fysieke leefomgeving wordt of kan worden bewerkstelligd.&lt;/p&gt;&lt;/body&gt;&lt;body&gt;&lt;p&gt;Er wordt niet een activiteit bedoeld die een initiatiefnemer voorgenomen is om uit te voeren, maar het type activiteit waarover regels opgesteld zijn. De regel geeft aan dat activiteiten van een bepaald type activiteit wel of niet zijn toegestaan zijn op deze locatie en onder welke voorwaarden.&lt;/p&gt;&lt;/body&gt;
    /// </summary>
    [DataContract(Name = "Activiteit")]
    public partial class Activiteit : IEquatable<Activiteit>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Activiteit" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Activiteit() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Activiteit" /> class.
        /// </summary>
        /// <param name="begindatum">begindatum (required).</param>
        /// <param name="bovenliggendeActiviteitIdentificatie">bovenliggendeActiviteitIdentificatie (required).</param>
        /// <param name="einddatum">einddatum (required).</param>
        /// <param name="gerelateerdeActiviteitIdentificaties">gerelateerdeActiviteitIdentificaties.</param>
        /// <param name="groep">groep (required).</param>
        /// <param name="identificatie">identificatie (required).</param>
        /// <param name="juridischeRegelVoorIedereenIdentificaties">juridischeRegelVoorIedereenIdentificaties (required).</param>
        /// <param name="laatsteWijzigingsdatum">laatsteWijzigingsdatum (required).</param>
        /// <param name="naam">naam (required).</param>
        public Activiteit(DateTime begindatum = default(DateTime), string bovenliggendeActiviteitIdentificatie = default(string), DateTime einddatum = default(DateTime), List<string> gerelateerdeActiviteitIdentificaties = default(List<string>), Activiteitengroep groep = default(Activiteitengroep), string identificatie = default(string), List<string> juridischeRegelVoorIedereenIdentificaties = default(List<string>), DateTime laatsteWijzigingsdatum = default(DateTime), string naam = default(string))
        {
            this.Begindatum = begindatum;
            // to ensure "bovenliggendeActiviteitIdentificatie" is required (not null)
            this.BovenliggendeActiviteitIdentificatie = bovenliggendeActiviteitIdentificatie ?? throw new ArgumentNullException("bovenliggendeActiviteitIdentificatie is a required property for Activiteit and cannot be null");
            this.Einddatum = einddatum;
            // to ensure "groep" is required (not null)
            this.Groep = groep ?? throw new ArgumentNullException("groep is a required property for Activiteit and cannot be null");
            // to ensure "identificatie" is required (not null)
            this.Identificatie = identificatie ?? throw new ArgumentNullException("identificatie is a required property for Activiteit and cannot be null");
            // to ensure "juridischeRegelVoorIedereenIdentificaties" is required (not null)
            this.JuridischeRegelVoorIedereenIdentificaties = juridischeRegelVoorIedereenIdentificaties ?? throw new ArgumentNullException("juridischeRegelVoorIedereenIdentificaties is a required property for Activiteit and cannot be null");
            this.LaatsteWijzigingsdatum = laatsteWijzigingsdatum;
            // to ensure "naam" is required (not null)
            this.Naam = naam ?? throw new ArgumentNullException("naam is a required property for Activiteit and cannot be null");
            this.GerelateerdeActiviteitIdentificaties = gerelateerdeActiviteitIdentificaties;
        }

        /// <summary>
        /// Gets or Sets Begindatum
        /// </summary>
        [DataMember(Name = "begindatum", IsRequired = true, EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime Begindatum { get; set; }

        /// <summary>
        /// Gets or Sets BovenliggendeActiviteitIdentificatie
        /// </summary>
        [DataMember(Name = "bovenliggendeActiviteitIdentificatie", IsRequired = true, EmitDefaultValue = false)]
        public string BovenliggendeActiviteitIdentificatie { get; set; }

        /// <summary>
        /// Gets or Sets Einddatum
        /// </summary>
        [DataMember(Name = "einddatum", IsRequired = true, EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime Einddatum { get; set; }

        /// <summary>
        /// Gets or Sets GerelateerdeActiviteitIdentificaties
        /// </summary>
        [DataMember(Name = "gerelateerdeActiviteitIdentificaties", EmitDefaultValue = false)]
        public List<string> GerelateerdeActiviteitIdentificaties { get; set; }

        /// <summary>
        /// Gets or Sets Groep
        /// </summary>
        [DataMember(Name = "groep", IsRequired = true, EmitDefaultValue = false)]
        public Activiteitengroep Groep { get; set; }

        /// <summary>
        /// Gets or Sets Identificatie
        /// </summary>
        [DataMember(Name = "identificatie", IsRequired = true, EmitDefaultValue = false)]
        public string Identificatie { get; set; }

        /// <summary>
        /// Gets or Sets JuridischeRegelVoorIedereenIdentificaties
        /// </summary>
        [DataMember(Name = "juridischeRegelVoorIedereenIdentificaties", IsRequired = true, EmitDefaultValue = false)]
        public List<string> JuridischeRegelVoorIedereenIdentificaties { get; set; }

        /// <summary>
        /// Gets or Sets LaatsteWijzigingsdatum
        /// </summary>
        [DataMember(Name = "laatsteWijzigingsdatum", IsRequired = true, EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime LaatsteWijzigingsdatum { get; set; }

        /// <summary>
        /// Gets or Sets Naam
        /// </summary>
        [DataMember(Name = "naam", IsRequired = true, EmitDefaultValue = false)]
        public string Naam { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Activiteit {\n");
            sb.Append("  Begindatum: ").Append(Begindatum).Append("\n");
            sb.Append("  BovenliggendeActiviteitIdentificatie: ").Append(BovenliggendeActiviteitIdentificatie).Append("\n");
            sb.Append("  Einddatum: ").Append(Einddatum).Append("\n");
            sb.Append("  GerelateerdeActiviteitIdentificaties: ").Append(GerelateerdeActiviteitIdentificaties).Append("\n");
            sb.Append("  Groep: ").Append(Groep).Append("\n");
            sb.Append("  Identificatie: ").Append(Identificatie).Append("\n");
            sb.Append("  JuridischeRegelVoorIedereenIdentificaties: ").Append(JuridischeRegelVoorIedereenIdentificaties).Append("\n");
            sb.Append("  LaatsteWijzigingsdatum: ").Append(LaatsteWijzigingsdatum).Append("\n");
            sb.Append("  Naam: ").Append(Naam).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Activiteit);
        }

        /// <summary>
        /// Returns true if Activiteit instances are equal
        /// </summary>
        /// <param name="input">Instance of Activiteit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Activiteit input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Begindatum == input.Begindatum ||
                    (this.Begindatum != null &&
                    this.Begindatum.Equals(input.Begindatum))
                ) && 
                (
                    this.BovenliggendeActiviteitIdentificatie == input.BovenliggendeActiviteitIdentificatie ||
                    (this.BovenliggendeActiviteitIdentificatie != null &&
                    this.BovenliggendeActiviteitIdentificatie.Equals(input.BovenliggendeActiviteitIdentificatie))
                ) && 
                (
                    this.Einddatum == input.Einddatum ||
                    (this.Einddatum != null &&
                    this.Einddatum.Equals(input.Einddatum))
                ) && 
                (
                    this.GerelateerdeActiviteitIdentificaties == input.GerelateerdeActiviteitIdentificaties ||
                    this.GerelateerdeActiviteitIdentificaties != null &&
                    input.GerelateerdeActiviteitIdentificaties != null &&
                    this.GerelateerdeActiviteitIdentificaties.SequenceEqual(input.GerelateerdeActiviteitIdentificaties)
                ) && 
                (
                    this.Groep == input.Groep ||
                    (this.Groep != null &&
                    this.Groep.Equals(input.Groep))
                ) && 
                (
                    this.Identificatie == input.Identificatie ||
                    (this.Identificatie != null &&
                    this.Identificatie.Equals(input.Identificatie))
                ) && 
                (
                    this.JuridischeRegelVoorIedereenIdentificaties == input.JuridischeRegelVoorIedereenIdentificaties ||
                    this.JuridischeRegelVoorIedereenIdentificaties != null &&
                    input.JuridischeRegelVoorIedereenIdentificaties != null &&
                    this.JuridischeRegelVoorIedereenIdentificaties.SequenceEqual(input.JuridischeRegelVoorIedereenIdentificaties)
                ) && 
                (
                    this.LaatsteWijzigingsdatum == input.LaatsteWijzigingsdatum ||
                    (this.LaatsteWijzigingsdatum != null &&
                    this.LaatsteWijzigingsdatum.Equals(input.LaatsteWijzigingsdatum))
                ) && 
                (
                    this.Naam == input.Naam ||
                    (this.Naam != null &&
                    this.Naam.Equals(input.Naam))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Begindatum != null)
                    hashCode = hashCode * 59 + this.Begindatum.GetHashCode();
                if (this.BovenliggendeActiviteitIdentificatie != null)
                    hashCode = hashCode * 59 + this.BovenliggendeActiviteitIdentificatie.GetHashCode();
                if (this.Einddatum != null)
                    hashCode = hashCode * 59 + this.Einddatum.GetHashCode();
                if (this.GerelateerdeActiviteitIdentificaties != null)
                    hashCode = hashCode * 59 + this.GerelateerdeActiviteitIdentificaties.GetHashCode();
                if (this.Groep != null)
                    hashCode = hashCode * 59 + this.Groep.GetHashCode();
                if (this.Identificatie != null)
                    hashCode = hashCode * 59 + this.Identificatie.GetHashCode();
                if (this.JuridischeRegelVoorIedereenIdentificaties != null)
                    hashCode = hashCode * 59 + this.JuridischeRegelVoorIedereenIdentificaties.GetHashCode();
                if (this.LaatsteWijzigingsdatum != null)
                    hashCode = hashCode * 59 + this.LaatsteWijzigingsdatum.GetHashCode();
                if (this.Naam != null)
                    hashCode = hashCode * 59 + this.Naam.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // BovenliggendeActiviteitIdentificatie (string) minLength
            if(this.BovenliggendeActiviteitIdentificatie != null && this.BovenliggendeActiviteitIdentificatie.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BovenliggendeActiviteitIdentificatie, length must be greater than 1.", new [] { "BovenliggendeActiviteitIdentificatie" });
            }

            yield break;
        }
    }

}
